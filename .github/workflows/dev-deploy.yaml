name: Deploy React App

on:
  push:
    branches:
      - main
  workflow_dispatch:

# 허용 권한 설정
permissions:
  contents: read
  actions: read
  packages: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

  build-and-deploy:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      APP_DIR: dist
      WEB_SERVER: ${{ secrets.WEB_SERVER }}
      WEB_DIR: /var/www/html
      WEB_BACKUP_DIR: /var/www/backups
      DEPLOY_DIR: /home/ubuntu/deploy
      NODE_ENV: development
      DEPLOY_VERSION: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run build
        env:
          DISABLE_ESLINT_PLUGIN: true
          GENERATE_SOURCEMAP: false
          TSC_COMPILE_ON_ERROR: true

      - name: Create version file
        run: |
          cat <<EOF > $APP_DIR/version.json
          {
            "version": "${{ env.DEPLOY_VERSION }}",
            "deployedAt": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          }
          EOF

      - name: Save SSH private key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.WEB_SERVER }} >> ~/.ssh/known_hosts

      - name: Test SSH connection to Web Server
        run: ssh -i private_key -o ConnectTimeout=10 ubuntu@${{ env.WEB_SERVER }} 'echo "Web Server SSH connection successful"'

      - name: Prepare deployment directory
        run: ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
          sudo mkdir -p ${{ env.DEPLOY_DIR }} &&
          sudo chown ubuntu:ubuntu ${{ env.DEPLOY_DIR }} &&
          sudo chmod 755 ${{ env.DEPLOY_DIR }} &&
          rm -rf ${{ env.DEPLOY_DIR }}/*
          '

      - name: Deploy to Web Server
        run: |
          rsync -avz --delete --progress \
            -e "ssh -i private_key" \
            $APP_DIR/ ubuntu@${{ env.WEB_SERVER }}:${{ env.DEPLOY_DIR }}/

          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
            echo "배포 시작..."
            sudo mkdir -p ${{ env.WEB_BACKUP_DIR }}
            BACKUP_DIR=${{ env.WEB_BACKUP_DIR }}/backup_$(date +%Y%m%d_%H%M%S)
            sudo mkdir -p $BACKUP_DIR
            sudo cp -r ${{ env.WEB_DIR }}/* $BACKUP_DIR/ 2>/dev/null || true
            echo $BACKUP_DIR > /tmp/latest_backup
            echo "백업 완료: $BACKUP_DIR"

            if [ -d "${{ env.DEPLOY_DIR }}" ] && [ "$(ls -A ${{ env.DEPLOY_DIR }})" ]; then
              sudo rm -rf ${{ env.WEB_DIR }}/*
              sudo cp -r ${{ env.DEPLOY_DIR }}/* ${{ env.WEB_DIR }}/
              sudo chown -R www-data:www-data ${{ env.WEB_DIR }}
              sudo rm -rf ${{ env.DEPLOY_DIR }}/*
              echo "배포 완료"
            else
              echo "배포할 파일이 없습니다"
              exit 1
            fi
            '

      - name: Restart Nginx
        run: ssh -i private_key ubuntu@${{ env.WEB_SERVER }} 'sudo systemctl restart nginx'

      - name: Verify Nginx status
        run: |
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} 'sudo systemctl is-active nginx || (echo "Nginx is not running" && exit 1)'
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} 'sudo nginx -t || (echo "Nginx configuration test failed" && exit 1)'

      - name: Health check
        run: |
          for i in {1..10}; do
            if ssh -i private_key ubuntu@${{ env.WEB_SERVER }} 'curl -f http://localhost/'; then
              echo "Health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Health check failed after 10 attempts"
              exit 1
            fi
            echo "Attempt $i: Health check failed, retrying in 10 seconds..."
            sleep 10
          done

      - name: External health check
        if: success()
        run: |
          if [ ! -z "${{ secrets.APP_URL }}" ]; then
            for i in {1..5}; do
              if curl -f ${{ secrets.APP_URL }}/; then
                echo "External health check passed"
                break
              fi
              if [ $i -eq 5 ]; then
                echo "External health check failed after 5 attempts"
                echo "::warning::External health check failed, but deployment completed"
              fi
              echo "External attempt $i: Health check failed, retrying in 10 seconds..."
              sleep 10
            done
          else
            echo "APP_URL not configured, skipping external health check"
          fi

      - name: Rollback on failure
        if: failure()
        run: |
          echo "배포 실패로 인한 롤백 시작..."
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
            if [ -f /tmp/latest_backup ]; then
              LATEST_BACKUP=$(cat /tmp/latest_backup)
              if [ -d "$LATEST_BACKUP" ]; then
                sudo rm -rf ${{ env.WEB_DIR }}/*
                sudo cp -r $LATEST_BACKUP/* ${{ env.WEB_DIR }}/
                sudo chown -R www-data:www-data ${{ env.WEB_DIR }}
                sudo systemctl restart nginx
                echo "롤백 완료: $LATEST_BACKUP"
              else
                echo "백업 디렉토리를 찾을 수 없습니다: $LATEST_BACKUP"
              fi
            else
              echo "백업 정보를 찾을 수 없습니다"
            fi
            '

      - name: Clean old backups
        if: success()
        run: ssh -i private_key ubuntu@${{ env.WEB_SERVER }} "sudo find ${{ env.WEB_BACKUP_DIR }}/backup_* -maxdepth 0 -mtime +7 -exec rm -rf {} \; 2>/dev/null || true"

      - name: Clean up
        if: always()
        run: rm -f private_key
