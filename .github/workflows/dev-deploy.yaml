name: Deploy React App

on:
  push:
    branches:
      - main
  workflow_dispatch:

# 허용 권한 설정
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.value }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ hashFiles('**/package-lock.json', '**/vite.config.ts', '**/tsconfig.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles('package.json') }}
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Build app
        run: npx vite build --mode development
        env:
          DISABLE_ESLINT_PLUGIN: true
          GENERATE_SOURCEMAP: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      WEB_SERVER: ${{ secrets.WEB_SERVER }}
      WEB_DIR: /var/www/html
      WEB_BACKUP_DIR: /var/www/backups
      DEPLOY_DIR: /home/ubuntu/deploy

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Setup SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.WEB_SERVER }} >> ~/.ssh/known_hosts

      - name: Prepare deployment directory
        run: |
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
            sudo mkdir -p ${{ env.DEPLOY_DIR }} ${{ env.WEB_BACKUP_DIR }}
            sudo chown ubuntu:ubuntu ${{ env.DEPLOY_DIR }}
            sudo chmod 755 ${{ env.DEPLOY_DIR }}
            rm -rf ${{ env.DEPLOY_DIR }}/*
          '

      - name: Upload build to remote server
        run: |
          rsync -avz --delete --progress \
            -e "ssh -i private_key -o BatchMode=yes" \
            dist/ ubuntu@${{ env.WEB_SERVER }}:${{ env.DEPLOY_DIR }}/

      - name: Backup and Deploy
        run: |
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
            set -e
            echo "배포 시작..."
            
            # 백업 생성
            BACKUP_DIR=${{ env.WEB_BACKUP_DIR }}/backup_$(date +%Y%m%d_%H%M%S)
            sudo mkdir -p $BACKUP_DIR
            if [ -d "${{ env.WEB_DIR }}" ] && [ "$(ls -A ${{ env.WEB_DIR }})" ]; then
              sudo cp -r ${{ env.WEB_DIR }}/* $BACKUP_DIR/
              echo $BACKUP_DIR > /tmp/latest_backup
              echo "백업 완료: $BACKUP_DIR"
            fi

            # 배포 실행
            if [ -d "${{ env.DEPLOY_DIR }}" ] && [ "$(ls -A ${{ env.DEPLOY_DIR }})" ]; then
              sudo rm -rf ${{ env.WEB_DIR }}/*
              sudo cp -r ${{ env.DEPLOY_DIR }}/* ${{ env.WEB_DIR }}/
              sudo chown -R www-data:www-data ${{ env.WEB_DIR }}
              sudo chmod -R 755 ${{ env.WEB_DIR }}
              sudo rm -rf ${{ env.DEPLOY_DIR }}/*
              echo "배포 완료"
            else
              echo "배포할 파일이 없습니다"
              exit 1
            fi
          '

      - name: Restart Nginx
        run: |
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
            sudo nginx -t
            sudo systemctl restart nginx
            sudo systemctl is-active nginx
          '

      - name: Health check
        run: |
          for i in {1..5}; do
            if ssh -i private_key ubuntu@${{ env.WEB_SERVER }} 'curl -f -s --max-time 10 http://localhost/' > /dev/null; then
              echo "Health check passed on attempt $i"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              exit 1
            fi
            echo "Attempt $i: Health check failed, retrying in 5 seconds..."
            sleep 5
          done

      - name: Rollback on failure
        if: failure()
        run: |
          echo "배포 실패로 인한 롤백 시작..."
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
            if [ -f /tmp/latest_backup ]; then
              LATEST_BACKUP=$(cat /tmp/latest_backup)
              if [ -d "$LATEST_BACKUP" ]; then
                sudo rm -rf ${{ env.WEB_DIR }}/*
                sudo cp -r $LATEST_BACKUP/* ${{ env.WEB_DIR }}/
                sudo chown -R www-data:www-data ${{ env.WEB_DIR }}
                sudo chmod -R 755 ${{ env.WEB_DIR }}
                sudo systemctl restart nginx
                echo "롤백 완료: $LATEST_BACKUP"
              else
                echo "백업 디렉토리를 찾을 수 없습니다: $LATEST_BACKUP"
              fi
            else
              echo "백업 정보를 찾을 수 없습니다"
            fi
          '

      - name: Clean old backups
        if: success()
        run: |
          ssh -i private_key ubuntu@${{ env.WEB_SERVER }} '
            sudo find ${{ env.WEB_BACKUP_DIR }}/backup_* -maxdepth 0 -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            echo "오래된 백업 정리 완료"
          '

      - name: Clean up
        if: always()
        run: rm -f private_key
