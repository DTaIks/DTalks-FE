name: Deploy to Kakao Object Storage

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Build app
        run: npm run build
        env:
          DISABLE_ESLINT_PLUGIN: true
          GENERATE_SOURCEMAP: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      KAKAO_REGION: ${{ secrets.KAKAO_REGION }}
      KAKAO_PROJECT_ID: ${{ secrets.KAKAO_PROJECT_ID }}
      KAKAO_BUCKET: ${{ secrets.KAKAO_BUCKET }}
      KAKAO_IAM_ACCESS_KEY_ID: ${{ secrets.KAKAO_IAM_ACCESS_KEY_ID }}
      KAKAO_IAM_SECRET_KEY: ${{ secrets.KAKAO_IAM_SECRET_KEY }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq file

      - name: Issue API token
        id: auth
        shell: bash
        run: |
          set -e
          AUTH_PAYLOAD=$(cat <<'JSON'
          {
              "auth": {
                  "identity": {
                      "methods": [
                          "application_credential"
                      ],
                      "application_credential": {
                          "id": "${KAKAO_IAM_ACCESS_KEY_ID}",
                          "secret": "${KAKAO_IAM_SECRET_KEY}"
                      }
                  }
              }
          }
          JSON
          )
          HEADERS_FILE=$(mktemp)
          curl -s -i -X POST "https://iam.kakaocloud.com/identity/v3/auth/tokens" \
            -H "Content-Type: application/json" \
            -d "$AUTH_PAYLOAD" \
            -o /dev/null -D "$HEADERS_FILE"
          TOKEN=$(awk '/^X-Subject-Token:/ {print $2}' "$HEADERS_FILE" | tr -d '\r')
          if [ -z "$TOKEN" ]; then
            echo "Failed to get X-Subject-Token"
            echo "---- headers ----"
            cat "$HEADERS_FILE"
            exit 1
          fi
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Ensure bucket exists
        run: |
          set -e
          BASE_URL="https://objectstorage.${KAKAO_REGION}.kakaocloud.com/v1/${KAKAO_PROJECT_ID}/${KAKAO_BUCKET}"
          # Create container if not exists (Swift: PUT on container path)
          curl -s -o /dev/null -w "%{http_code}" -X PUT "$BASE_URL" \
            -H "X-Auth-Token: ${{ steps.auth.outputs.token }}" \
            || true

      - name: Delete existing objects
        run: |
          set -e
          BASE_URL="https://objectstorage.${KAKAO_REGION}.kakaocloud.com/v1/${KAKAO_PROJECT_ID}/${KAKAO_BUCKET}"
          OBJECTS=$(curl -s -X GET "$BASE_URL?format=json" -H "X-Auth-Token: ${{ steps.auth.outputs.token }}" | jq -r '.[].name')
          if [ -n "$OBJECTS" ]; then
            echo "$OBJECTS" | while read -r obj; do
              if [ -n "$obj" ]; then
                curl -s -X DELETE "$BASE_URL/$obj" -H "X-Auth-Token: ${{ steps.auth.outputs.token }}" -o /dev/null -w "Deleted: $obj (%{http_code})\n"
              fi
            done
          else
            echo "No existing objects to delete"
          fi

      - name: Upload dist to bucket
        run: |
          set -e
          BASE_URL="https://objectstorage.${KAKAO_REGION}.kakaocloud.com/v1/${KAKAO_PROJECT_ID}/${KAKAO_BUCKET}"
          find dist -type f ! -name 'index.html' -print0 | while IFS= read -r -d '' file; do
            REL_PATH="${file#dist/}"
            MIME_TYPE=$(file -b --mime-type "$file" || echo "application/octet-stream")
            CACHE_CONTROL="public, max-age=31536000, immutable"
            echo "Uploading $REL_PATH (cache: $CACHE_CONTROL)"
            curl --fail -s -X PUT "$BASE_URL/$REL_PATH" \
              -H "X-Auth-Token: ${{ steps.auth.outputs.token }}" \
              -H "Content-Type: $MIME_TYPE" \
              -H "Cache-Control: $CACHE_CONTROL" \
              --data-binary @"$file" \
              -o /dev/null || { echo "Failed to upload $REL_PATH"; exit 1; }
          done

          if [ -f dist/index.html ]; then
            MIME_TYPE=$(file -b --mime-type dist/index.html || echo "text/html")
            CACHE_CONTROL="no-cache, no-store, must-revalidate"
            echo "Uploading index.html (cache: $CACHE_CONTROL)"
            curl --fail -s -X PUT "$BASE_URL/index.html" \
              -H "X-Auth-Token: ${{ steps.auth.outputs.token }}" \
              -H "Content-Type: $MIME_TYPE" \
              -H "Cache-Control: $CACHE_CONTROL" \
              --data-binary @"dist/index.html" \
              -o /dev/null || { echo "Failed to upload index.html"; exit 1; }
          fi

      - name: Done
        run: echo "배포 완료"
