import { useMemo } from 'react';
import { useMediaStore } from '@/store/mediaStore';
import { useMediaFiles } from '@/query/useMediaQueries';
import { useFileUpload } from '@/query/useMediaMutations';
import { transformCommonFileToMediaFile } from './useMediaFile';

export const useMediaPage = () => {
  // Zustand storeÏóêÏÑú UI ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞
  const {
    selectedDepartment,
    selectedFileType,
    isArchiveMode,
    isArchiveClosing,
    currentPage,
    uploadModal,
    confirmModal,
    versionModal,
    setSelectedDepartment,
    setSelectedFileType,
    setArchiveMode,
    setArchiveClosing,
    setCurrentPage,
    openUploadModal,
    closeUploadModal,
    openEditModal,
    openConfirmModal,
    closeConfirmModal,
    openVersionModal,
    closeVersionModal,
  } = useMediaStore();

  // React QueryÎ°ú ÏÑúÎ≤Ñ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const apiParams = {
    option: selectedDepartment === 'Ï†ÑÏ≤¥ ÌååÏùº' ? 'Ï†ÑÏ≤¥' : selectedDepartment,
    pageNumber: currentPage, // ÏÑúÎ≤ÑÎäî 0-based Ïù∏Îç±Ïä§ ÏÇ¨Ïö©
    // ÌååÏùº ÌÉÄÏûÖ ÌïÑÌÑ∞ÎèÑ APIÏóê Ï†ÑÎã¨ (APIÏóêÏÑú ÏßÄÏõêÌïòÎäî Í≤ΩÏö∞)
    fileType: selectedFileType !== 'all' ? selectedFileType : undefined,
  };

  console.log('üîç API ÌååÎùºÎØ∏ÌÑ∞:', JSON.stringify(apiParams));
  console.log('üîç ÏÑ†ÌÉùÎêú Î∂ÄÏÑú:', selectedDepartment);
  console.log('üîç ÌòÑÏû¨ ÌéòÏù¥ÏßÄ:', currentPage);
  console.log('üîç useMediaFiles Ìò∏Ï∂ú ÏãúÏûë');

  const { data: mediaData, isLoading, error } = useMediaFiles(apiParams);

  console.log('üîç useMediaFiles Ìò∏Ï∂ú ÏôÑÎ£å');
  console.log('üîç API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', JSON.stringify(mediaData, null, 2));
  console.log('üîç Î°úÎî© ÏÉÅÌÉú:', isLoading);
  console.log('üîç ÏóêÎü¨ ÏÉÅÌÉú:', error);
  
  const uploadMutation = useFileUpload();

  // API Îç∞Ïù¥ÌÑ∞Î•º MediaFile ÌòïÌÉúÎ°ú Î≥ÄÌôò
  const apiFiles = useMemo(() => {
    console.log('üîç mediaData?.commonFileInfoList:', mediaData?.commonFileInfoList);
    if (!mediaData?.commonFileInfoList) {
      console.log('üîç commonFileInfoListÍ∞Ä ÏóÜÏùå');
      return [];
    }
    console.log('üîç Î≥ÄÌôò ÏãúÏûë, Í∞úÏàò:', mediaData.commonFileInfoList.length);
    const transformed = mediaData.commonFileInfoList.map(transformCommonFileToMediaFile);
    console.log('üîç Î≥ÄÌôò Í≤∞Í≥º:', transformed);
    return transformed;
  }, [mediaData]);

  console.log('üîç Î≥ÄÌôòÎêú API ÌååÏùºÎì§:', apiFiles);

  // ÌïÑÌÑ∞ÎßÅÎêú ÌååÏùºÎì§ (API Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò)
  const filteredFiles = useMemo(() => {
    console.log('üîç ÌïÑÌÑ∞ÎßÅ ÏãúÏûë - apiFiles:', apiFiles);
    console.log('üîç ÏÑ†ÌÉùÎêú Î∂ÄÏÑú:', selectedDepartment);
    console.log('üîç ÏÑ†ÌÉùÎêú ÌååÏùº ÌÉÄÏûÖ:', selectedFileType);
    
    if (!apiFiles.length) return [];
    
    // APIÏóêÏÑú Ïù¥ÎØ∏ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÍ≥º ÌïÑÌÑ∞ÎßÅÏù¥ Ï†ÅÏö©Îêú Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏúºÎØÄÎ°ú
    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑúÎäî Ï∂îÍ∞Ä ÌïÑÌÑ∞ÎßÅÏùÑ ÌïòÏßÄ ÏïäÍ≥† Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
    let filtered = apiFiles;
    
    // Î∂ÄÏÑúÎ≥Ñ ÌïÑÌÑ∞ÎßÅ (APIÏóêÏÑú Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå)
    if (selectedDepartment && selectedDepartment !== 'Ï†ÑÏ≤¥ ÌååÏùº') {
      filtered = filtered.filter(file => file.departmentName === selectedDepartment);
    }
    
    // ÌååÏùº ÌÉÄÏûÖÎ≥Ñ ÌïÑÌÑ∞ÎßÅ (APIÏóêÏÑú Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå)
    if (selectedFileType && selectedFileType !== 'all') {
      filtered = filtered.filter(file => file.fileType === selectedFileType);
    }
    
    console.log('üîç ÌïÑÌÑ∞ÎßÅ Í≤∞Í≥º:', filtered);
    return filtered;
  }, [apiFiles, selectedDepartment, selectedFileType]); // apiFilesÎ•º ÏùòÏ°¥ÏÑ±ÏúºÎ°ú ÏÇ¨Ïö©

  console.log('üîç ÌïÑÌÑ∞ÎßÅÎêú ÌååÏùºÎì§:', filteredFiles);

  // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï†ïÎ≥¥
  const totalPages = useMemo(() => {
    console.log('üîç mediaData?.pagingInfo:', mediaData?.pagingInfo);
    if (!mediaData?.pagingInfo) {
      console.log('üîç pagingInfoÍ∞Ä ÏóÜÏùå, Í∏∞Î≥∏Í∞í 1 Î∞òÌôò');
      return 1;
    }
    const pages = mediaData.pagingInfo.totalPageCount || 1;
    console.log('üîç Ï¥ù ÌéòÏù¥ÏßÄ Ïàò:', pages);
    return pages;
  }, [mediaData]);

  // Î≥¥Í¥ÄÌï® Í¥ÄÎ†® Ìï∏Îì§Îü¨
  const handleArchiveSelect = () => {
    setArchiveMode(true);
    setSelectedDepartment('Ï†ÑÏ≤¥ ÌååÏùº');
    setSelectedFileType('all');
  };

  const handleArchiveClose = () => {
    setArchiveClosing(true);
    setTimeout(() => {
      setArchiveMode(false);
      setArchiveClosing(false);
    }, 400);
  };

  const handleArchiveDepartmentSelect = (departmentName: string) => {
    setSelectedDepartment(departmentName);
    setSelectedFileType('all');
  };

  // ÌååÏùº ÌÉÄÏûÖ ÏÑ†ÌÉù Ìï∏Îì§Îü¨
  const handleFileTypeSelect = (fileType: 'Ï†ÑÏ≤¥' | 'Î¨∏ÏÑú' | 'Ïù¥ÎØ∏ÏßÄ' | 'ÏùåÏÑ±') => {
    const fileTypeMap: Record<string, 'document' | 'image' | 'audio' | 'all'> = {
      'Ï†ÑÏ≤¥': 'all',
      'Î¨∏ÏÑú': 'document',
      'Ïù¥ÎØ∏ÏßÄ': 'image',
      'ÏùåÏÑ±': 'audio',
    };
    setSelectedFileType(fileTypeMap[fileType]);
  };

  // Ï†ÑÏ≤¥ ÏÑ†ÌÉù Ìï∏Îì§Îü¨
  const handleAllSelect = () => {
    setSelectedDepartment('Ï†ÑÏ≤¥ ÌååÏùº');
    setSelectedFileType('all');
    setArchiveMode(false);
  };

  // Î∂ÄÏÑú ÏÑ†ÌÉù Ìï∏Îì§Îü¨
  const handleDepartmentSelect = (departmentName: string) => {
    setSelectedDepartment(departmentName);
    setSelectedFileType('all');
    if (!isArchiveMode) {
      setArchiveMode(false);
    }
  };

  return {
    // ÏÉÅÌÉú
    selectedDepartment,
    selectedFileType,
    isArchiveMode,
    isArchiveClosing,
    currentPage,
    uploadModal,
    confirmModal,
    versionModal,
    filteredFiles,
    totalPages,
    isLoading,
    error,
    isUploading: uploadMutation.isPending,

    // Ïï°ÏÖò
    setSelectedDepartment,
    setSelectedFileType,
    setCurrentPage,
    openUploadModal,
    closeUploadModal,
    openEditModal,
    openConfirmModal,
    closeConfirmModal,
    openVersionModal,
    closeVersionModal,
    handleArchiveSelect,
    handleArchiveClose,
    handleArchiveDepartmentSelect,
    handleFileTypeSelect,
    handleAllSelect,
    handleDepartmentSelect,
    uploadMutation,
  };
};
